import c from"@emotion/styled/base";import"@emotion/react";function X(){return"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."}var x="production"===process.env.NODE_ENV?{name:"1s5168b",styles:"background-color:#1f2937;color:white"}:{name:"qs14ig-Container",styles:"background-color:#1f2937;color:white;label:Container;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X};const H=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo20"}:{target:"e18q7smo20",label:"Container"})("position:relative;margin:0 auto;width:100%;max-width:750px;padding:20px;@media (min-width: 768px){padding:32px;}@media (min-width: 1024px){padding:28px 32px;}@media (min-width: 1280px){padding:40px 50px;}",({theme:c})=>"dark"===c&&x,";"+("production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),l=c("h1","production"===process.env.NODE_ENV?{target:"e18q7smo19"}:{target:"e18q7smo19",label:"Title"})("production"===process.env.NODE_ENV?{name:"10bardp",styles:"font-size:2rem;font-weight:700;text-align:center;margin-bottom:24px;color:inherit;@media (min-width: 768px){font-size:2.5rem;}"}:{name:"10bardp",styles:"font-size:2rem;font-weight:700;text-align:center;margin-bottom:24px;color:inherit;@media (min-width: 768px){font-size:2.5rem;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),b=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo18"}:{target:"e18q7smo18",label:"WidgetContainer"})("production"===process.env.NODE_ENV?{name:"1e0be2w",styles:"margin-top:24px;display:flex;justify-content:center"}:{name:"1e0be2w",styles:"margin-top:24px;display:flex;justify-content:center",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),d=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo17"}:{target:"e18q7smo17",label:"InfoRow"})("production"===process.env.NODE_ENV?{name:"16edwcc",styles:"margin-top:28px;display:flex;align-items:center;justify-content:space-between;flex-wrap:wrap;gap:8px"}:{name:"16edwcc",styles:"margin-top:28px;display:flex;align-items:center;justify-content:space-between;flex-wrap:wrap;gap:8px",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),G=c("span","production"===process.env.NODE_ENV?{target:"e18q7smo16"}:{target:"e18q7smo16",label:"InfoText"})("production"===process.env.NODE_ENV?{name:"12jw98",styles:"font-size:16px;color:#000000"}:{name:"12jw98",styles:"font-size:16px;color:#000000",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),g=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo15"}:{target:"e18q7smo15",label:"TokenBalanceRow"})("production"===process.env.NODE_ENV?{name:"zdet50",styles:"margin-top:16px;display:flex;align-items:center;justify-content:space-between"}:{name:"zdet50",styles:"margin-top:16px;display:flex;align-items:center;justify-content:space-between",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),I=c("span","production"===process.env.NODE_ENV?{target:"e18q7smo14"}:{target:"e18q7smo14",label:"TokenBalanceLabel"})("production"===process.env.NODE_ENV?{name:"1ns3fdv",styles:"font-size:16px;color:rgba(0, 0, 0, 0.6)"}:{name:"1ns3fdv",styles:"font-size:16px;color:rgba(0, 0, 0, 0.6)",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),R=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo13"}:{target:"e18q7smo13",label:"TokenBalanceValue"})("production"===process.env.NODE_ENV?{name:"110bun6",styles:"display:flex;align-items:center;gap:4px;font-size:16px;color:#c9fa49"}:{name:"110bun6",styles:"display:flex;align-items:center;gap:4px;font-size:16px;color:#c9fa49",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),Z=c("img","production"===process.env.NODE_ENV?{target:"e18q7smo12"}:{target:"e18q7smo12",label:"TokenIcon"})("production"===process.env.NODE_ENV?{name:"hl12nw",styles:"height:24px;width:24px;border-radius:50%;flex-shrink:0;cursor:pointer;object-fit:cover"}:{name:"hl12nw",styles:"height:24px;width:24px;border-radius:50%;flex-shrink:0;cursor:pointer;object-fit:cover",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),u=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo11"}:{target:"e18q7smo11",label:"ButtonGrid"})("production"===process.env.NODE_ENV?{name:"1ltofn2",styles:"margin-top:20px;display:grid;grid-template-columns:1fr 1fr;gap:10px;align-items:center"}:{name:"1ltofn2",styles:"margin-top:20px;display:grid;grid-template-columns:1fr 1fr;gap:10px;align-items:center",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X});var y="production"===process.env.NODE_ENV?{name:"8jmtct",styles:"background-color:#c9fa49;color:#333333;&:hover{background-color:#b8e63a;transform:translateY(-1px);box-shadow:0 4px 12px rgba(201, 250, 73, 0.3);}"}:{name:"1vl9je9-Button",styles:"background-color:#c9fa49;color:#333333;&:hover{background-color:#b8e63a;transform:translateY(-1px);box-shadow:0 4px 12px rgba(201, 250, 73, 0.3);};label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},J="production"===process.env.NODE_ENV?{name:"1133mo2",styles:"background-color:transparent;color:#c9fa49;border:2px solid #c9fa49;&:hover{background-color:#c9fa49;color:#333333;transform:translateY(-1px);}"}:{name:"i2ye4z-Button",styles:"background-color:transparent;color:#c9fa49;border:2px solid #c9fa49;&:hover{background-color:#c9fa49;color:#333333;transform:translateY(-1px);};label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},W="production"===process.env.NODE_ENV?{name:"r970a4",styles:"background-color:#f3f4f6;color:#374151;&:hover{background-color:#e5e7eb;transform:translateY(-1px);}"}:{name:"1efrolv-Button",styles:"background-color:#f3f4f6;color:#374151;&:hover{background-color:#e5e7eb;transform:translateY(-1px);};label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},t="production"===process.env.NODE_ENV?{name:"1d3w5wq",styles:"width:100%"}:{name:"fyo4p-Button",styles:"width:100%;label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},m="production"===process.env.NODE_ENV?{name:"l4fg58",styles:"padding:12px 24px;font-size:16px;height:51px"}:{name:"h6ovxd-Button",styles:"padding:12px 24px;font-size:16px;height:51px;label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},Y="production"===process.env.NODE_ENV?{name:"srcxba",styles:"padding:16px 32px;font-size:18px;height:65px;width:194px"}:{name:"17zrwn-Button",styles:"padding:16px 32px;font-size:18px;height:65px;width:194px;label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X},F="production"===process.env.NODE_ENV?{name:"10j7r4j",styles:"padding:8px 16px;font-size:14px;height:36px"}:{name:"1w788f0-Button",styles:"padding:8px 16px;font-size:14px;height:36px;label:Button;",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X};const N=c("button","production"===process.env.NODE_ENV?{target:"e18q7smo10"}:{target:"e18q7smo10",label:"Button"})("border:none;border-radius:8px;font-weight:500;cursor:pointer;transition:all 0.2s ease-in-out;display:inline-flex;align-items:center;justify-content:center;",({size:c})=>{switch(c){case"small":return F;case"large":return Y;default:return m}}," ",({fullWidth:c})=>c&&t," ",({variant:c})=>{switch(c){case"secondary":return W;case"outline":return J;default:return y}}," &:disabled{opacity:0.6;cursor:not-allowed;&:hover{transform:none;box-shadow:none;}}&:active{transform:translateY(0);}&.full-width-button{grid-column:span 2;}"+("production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),A=c(N,"production"===process.env.NODE_ENV?{target:"e18q7smo9"}:{target:"e18q7smo9",label:"ConnectButton"})("production"===process.env.NODE_ENV?{name:"1202v6",styles:"background-color:#c9fa49;color:#333333;font-weight:700;border-radius:9999px"}:{name:"1202v6",styles:"background-color:#c9fa49;color:#333333;font-weight:700;border-radius:9999px",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),D=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo8"}:{target:"e18q7smo8",label:"HelpText"})("production"===process.env.NODE_ENV?{name:"13qtqlk",styles:"margin-top:16px;text-align:center;font-size:12px;font-weight:400;p{color:#000000;margin:0;}"}:{name:"13qtqlk",styles:"margin-top:16px;text-align:center;font-size:12px;font-weight:400;p{color:#000000;margin:0;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),C=c("span","production"===process.env.NODE_ENV?{target:"e18q7smo7"}:{target:"e18q7smo7",label:"HelpLink"})("production"===process.env.NODE_ENV?{name:"15pzcfu",styles:"cursor:pointer;color:#c9fa49;&:hover{text-decoration:underline;}"}:{name:"15pzcfu",styles:"cursor:pointer;color:#c9fa49;&:hover{text-decoration:underline;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),a=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo6"}:{target:"e18q7smo6",label:"ModalOverlay"})("position:fixed;top:0;left:0;right:0;bottom:0;background-color:rgba(0, 0, 0, 0.5);display:",({show:c})=>c?"flex":"none",";align-items:center;justify-content:center;z-index:1000;padding:16px;"+("production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),B=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo5"}:{target:"e18q7smo5",label:"ModalContent"})("background-color:white;border-radius:12px;max-width:",({maxWidth:c})=>c||"580px",";width:100%;max-height:90vh;overflow-y:auto;position:relative;padding:24px 20px;@media (min-width: 768px){padding:24px;}"+("production"===process.env.NODE_ENV?"":"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),O=c("button","production"===process.env.NODE_ENV?{target:"e18q7smo4"}:{target:"e18q7smo4",label:"CloseButton"})("production"===process.env.NODE_ENV?{name:"hqxv70",styles:"position:absolute;top:16px;right:16px;background:none;border:none;font-size:24px;cursor:pointer;color:#6b7280;padding:4px;&:hover{color:#374151;}"}:{name:"hqxv70",styles:"position:absolute;top:16px;right:16px;background:none;border:none;font-size:24px;cursor:pointer;color:#6b7280;padding:4px;&:hover{color:#374151;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),o=c("h2","production"===process.env.NODE_ENV?{target:"e18q7smo3"}:{target:"e18q7smo3",label:"ModalTitle"})("production"===process.env.NODE_ENV?{name:"1t9ynnx",styles:"font-size:2rem;color:#212428;font-weight:600;margin-top:16px;text-align:center;margin-bottom:20px;@media (max-width: 640px){margin-top:8px;}"}:{name:"1t9ynnx",styles:"font-size:2rem;color:#212428;font-weight:600;margin-top:16px;text-align:center;margin-bottom:20px;@media (max-width: 640px){margin-top:8px;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),i=c("p","production"===process.env.NODE_ENV?{target:"e18q7smo2"}:{target:"e18q7smo2",label:"ModalText"})("production"===process.env.NODE_ENV?{name:"1tfridg",styles:"font-size:20px;color:#212428;margin-top:20px;text-align:center;max-width:480px;margin-left:auto;margin-right:auto;line-height:1.5;@media (max-width: 640px){font-size:16px;}i{font-size:14px;margin-top:12px;display:block;b{font-weight:700;}}span{font-weight:600;}"}:{name:"1tfridg",styles:"font-size:20px;color:#212428;margin-top:20px;text-align:center;max-width:480px;margin-left:auto;margin-right:auto;line-height:1.5;@media (max-width: 640px){font-size:16px;}i{font-size:14px;margin-top:12px;display:block;b{font-weight:700;}}span{font-weight:600;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),n=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo1"}:{target:"e18q7smo1",label:"ModalButtonContainer"})("production"===process.env.NODE_ENV?{name:"1wn1pw",styles:"display:flex;justify-content:center;align-items:center;margin:20px 0"}:{name:"1wn1pw",styles:"display:flex;justify-content:center;align-items:center;margin:20px 0",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X}),v=c("div","production"===process.env.NODE_ENV?{target:"e18q7smo0"}:{target:"e18q7smo0",label:"IframeContainer"})("production"===process.env.NODE_ENV?{name:"bmsrzg",styles:"position:relative;iframe{height:630px;width:100%;border:none;}"}:{name:"bmsrzg",styles:"position:relative;iframe{height:630px;width:100%;border:none;}",map:"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",toString:X});export{N as Button,u as ButtonGrid,O as CloseButton,A as ConnectButton,H as Container,C as HelpLink,D as HelpText,v as IframeContainer,d as InfoRow,G as InfoText,n as ModalButtonContainer,B as ModalContent,a as ModalOverlay,i as ModalText,o as ModalTitle,l as Title,I as TokenBalanceLabel,g as TokenBalanceRow,R as TokenBalanceValue,Z as TokenIcon,b as WidgetContainer};
